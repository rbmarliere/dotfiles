#!/bin/bash

# https://openqa-bites.github.io/openqa/openqa-cli-cheat-sheet/

TARGET=qa # defined in ~/.ssh/config
MY_HOST=https://rmarliere-openqa.qe.prg2.suse.org
HOST=
HOST_OPT=
SKIP_CONFIRMATION=0

_set_host() {
	# echo $HOST >&2
	TARGET=qa
	case "$HOST" in
	ooo | o3 | *openqa.opensuse.org)
		HOST=https://openqa.opensuse.org
		HOST_OPT="--host $HOST"
		;;
	osd | *openqa.suse.de)
		HOST=https://openqa.suse.de
		HOST_OPT="--host $HOST"
		;;
	local)
		HOST=
		HOST_OPT=
		;;
	*)
		HOST=$MY_HOST
		HOST_OPT="--host $HOST"
		;;
	esac
}

_host_check() {
	_set_host
	if [[ $HOST != "$MY_HOST" ]]; then
		echo "error: HOST is not $MY_HOST" >&2
		return 1
	fi
	return 0
}

_qa() {
	local CMD=("$@")
	shift

	if [[ $SKIP_CONFIRMATION -eq 0 ]]; then
		read -rp "$(printf "\n%s\n\nConfirm? [y|N] " "${CMD[*]}")" ans
		ans=${ans:-N}
		if [[ ! "$ans" =~ ^[Yy]$ ]]; then
			return 1
		fi
	else
		echo "${CMD[@]}"
	fi

	"${CMD[@]}"
}

_qa-get-build-jobs() {
	_set_host

	local URL_HOST
	local QUERY
	local JOBS
	local URL

	URL="$(printf '%b\n' "${1//%/\\x}")"
	URL_HOST=$(echo "$URL" | awk -F '/tests' '{print $1}')
	QUERY=$(echo "${URL##*\?}" | sed 's/&/ /g')

	HOST=$URL_HOST qa api jobs/overview $QUERY | jq -r '.[].id'
}

qa() {
	_set_host
	local CMD=$1
	shift
	_qa openqa-cli $CMD $HOST_OPT "$@"
}

qa-load-templates() {
	_host_check || return
	_qa openqa-load-templates $HOST_OPT "$@"
}

qa-dump-templates() {
	_set_host
	local GROUP_ID=${1:?usage: qa-dump-templates GROUP_ID}
	_qa openqa-dump-templates $HOST_OPT --group "$GROUP_ID" --json "$@"
}

qa-post-schedule() {
	_host_check || return
	GROUP_ID=${1:?usage: qa-post-schedule GROUP_ID FILE}
	TEMPLATE=${2:?usage: qa-post-schedule GROUP_ID FILE}
	qa api -X POST job_templates_scheduling/"$GROUP_ID" schema=JobTemplates-01.yaml --param-file template="$TEMPLATE"
}

qa-post() {
	_set_host
	qa api -X POST isos "$@"
}

qa-clone-job() {
	_set_host

	# https://openqa-bites.github.io/posts/2023/2023-02-23-safely_clone_a_job_on_a_production_instance/
	local NS='_GROUP=0 BUILD+="rbmarliere" TEST+="rbmarliere"'

	local SSH="ssh $TARGET -- "
	local SKIP_DOWNLOAD=
	local WITHIN_INSTANCE=
	local SKIP_UPDATES=
	local SKIP_DEPS=
	local REMOTE=os-autoinst
	local BRANCH=
	local NO_CASEDIR=

	usage() {
		echo "usage: qa-clone-job [options] JOB"
		echo ""
		echo "      --no-ssh                    Don't run command through ssh to $TARGET"
		echo "  -D  --skip-chained-deps         Same as openqa-clone-job option"
		echo "  -U  --skip-updates              Use the special variables to skip maintenance updates"
		echo "  -s  --skip-download             Same openqa-clone-job option"
		echo "  -u  --unnamed                   Don't append '$NS' to the test environment"
		echo "  -w  --within-instance           Same as openqa-clone-job option"
		echo "  -r  --remote                    Remote to use in CASEDIR"
		echo "  -b  --branch                    Branch to use in CASEDIR"
		echo "      --no-casedir                Don't pass CASEDIR"
	}

	if [[ $# -lt 1 ]]; then
		usage
		return 1
	fi

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			usage
			return 0
			;;
		-s | --skip-download)
			SKIP_DOWNLOAD=--skip-download
			;;
		--no-ssh)
			SSH=
			;;
		-u | --unnamed)
			NS=
			;;
		-U | --skip-updates)
			SKIP_UPDATES="SKIP_MAINTENANCE_UPDATES=1 PUBLIC_CLOUD_IGNORE_EMPTY_REPO=1 PUBLIC_CLOUD_SKIP_MU=1"
			;;
		-w | --within-instance)
			SSH=
			HOST_OPT=
			WITHIN_INSTANCE="--within-instance"
			;;
		-D | --skip-chained-deps)
			SKIP_DEPS=--skip-chained-deps
			;;
		-r | --remote)
			REMOTE="$2"
			shift
			;;
		-b | --branch)
			BRANCH="$2"
			shift
			;;
		--no-casedir)
			NO_CASEDIR=1
			;;
		*)
			break
			;;
		esac
		shift
	done

	local JOB=$1
	shift

	local CASEDIR="https://github.com/$REMOTE/os-autoinst-distri-opensuse"
	if [[ -n $BRANCH ]]; then
		CASEDIR+="#$BRANCH"
	fi

	if [[ -n $NO_CASEDIR ]]; then
		CASEDIR=
	else
		CASEDIR="CASEDIR=$CASEDIR"
	fi

	_qa $SSH openqa-clone-job $HOST_OPT $SKIP_DEPS $SKIP_DOWNLOAD $WITHIN_INSTANCE $JOB $@ $NS $SKIP_UPDATES $CASEDIR
}

qa-clone-build() {
	# trap 'SKIP_CONFIRMATION=0; trap - SIGINT; return 1' SIGINT

	local CLONE_ALL=1
	local CLONE_FAILED=
	local CLONE_SKIPPED=
	local WITHIN_INSTANCE=0
	local LIMIT=0
	local NO_CONFIRM=
	local GROUP=
	local URL=
	local QA_CLONE_ARG=()
	local QA_CLONE_OPT=()

	usage() {
		echo "usage: qa-clone-build [options] URL -- [qa-clone-job options] [variables]"
		echo ""
		echo "  -F  --failed                    Clone failed jobs"
		echo "  -S  --skipped                   Clone skipped jobs"
		echo "  -c  --no-confirm                Don't ask for individual confirmations"
		echo "  -g  --group X                   Assign cloned jobs to _GROUP_ID=X"
		echo "  -l  --limit X                   Limit X jobs"
		echo "  -w  --within-instance           Clone within openQA instance"
	}

	if [[ $# -lt 1 ]]; then
		usage
		return 1
	fi

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--)
			shift
			# parse arguments and options to qa-clone-job
			while [[ $# -gt 0 ]]; do
				if [[ "$1" == -* ]]; then
					QA_CLONE_OPT+=("$1")
				else
					QA_CLONE_ARG+=("$1")
				fi
				shift
			done
			break
			;;
		-h | --help)
			usage
			return 0
			;;
		-F | --failed)
			CLONE_FAILED=1
			CLONE_ALL=0
			;;
		-S | --skipped)
			CLONE_SKIPPED=1
			CLONE_ALL=0
			;;
		-w | --within-instance)
			WITHIN_INSTANCE=1
			;;
		-l | --limit)
			shift
			LIMIT=$1
			;;
		-c | --no-confirm)
			NO_CONFIRM=1
			;;
		-g | --group)
			shift
			GROUP="_GROUP_ID=$1"
			;;
		*)
			if [[ -z "$URL" ]]; then
				URL="$1"
			else
				echo "error: multiple URL provided ($URL and $1)" >&2
				return 1
			fi
			;;
		esac
		shift
	done

	local JOBS
	mapfile -t JOBS < <(_qa-get-build-jobs "$URL")
	echo "found ${#JOBS[@]} jobs"

	local STATUS=""
	local CLONE_CUR=0
	local CUR=1
	[[ -n $NO_CONFIRM ]] && SKIP_CONFIRMATION=1
	for JOB_ID in "${JOBS[@]}"; do
		echo "JOB_ID=$JOB_ID :: $CUR/${#JOBS[@]}"
		if [[ $CLONE_ALL -ne 1 ]]; then
			STATUS=$(qa api jobs/"$JOB_ID" | jq -r '.job.result')
			[[ $STATUS == "failed" && $CLONE_FAILED ]] && CLONE_CUR=1
			[[ $STATUS == "skipped" && $CLONE_SKIPPED ]] && CLONE_CUR=1
		fi
		if [[ $CLONE_ALL -eq 1 || $CLONE_CUR -eq 1 ]]; then
			echo "cloning $JOB_ID..."
			if [[ $WITHIN_INSTANCE -eq 1 ]]; then
				qa-clone-job -w "${QA_CLONE_OPT[@]}" "$JOB_ID" "${QA_CLONE_ARG[@]}" $GROUP
			else
				JOB_ID=${URL//overview*/$JOB_ID}
				qa-clone-job "${QA_CLONE_OPT[@]}" "$JOB_ID" "${QA_CLONE_ARG[@]}" $GROUP
			fi
		fi
		CLONE_CUR=0
		((CUR++))

		if [[ $LIMIT -gt 0 && $CUR -gt $LIMIT ]]; then
			echo "Reached LIMIT of $LIMIT"
			break
		fi
	done
	SKIP_CONFIRMATION=0
}

qa-get-job() {
	local JOB_ID=${1:?usage: qa-get-job JOB_ID}
	qa api jobs/"$JOB_ID"
}

qa-restart-job() {
	local JOB_ID=${1:?usage: qa-restart-job [-s] JOB_ID}
	shift
	local SKIP_PARENTS=
	if [[ $1 == -s ]]; then
		SKIP_PARENTS=skip_parents=1
	fi
	qa api -X POST jobs/"$JOB_ID"/restart "$SKIP_PARENTS"
}

qa-start-job() {
	qa api -X POST isos BUILD="$(date +"%Y%m%d")" "$@"
	# ARCH="x86_64" DISTRI="microos" FLAVOR="MicroOS-Image" VERSION="Tumbleweed" HDD_1="openSUSE-MicroOS.x86_64-kvm-and-xen_nohealthchecker.qcow2"
}

qa-stop-job() {
	local JOB_ID=${1:?usage qa-stop-job JOB_ID}
	qa api -X POST jobs/"$JOB_ID"/cancel
}

qa-get-job-incidents() {
	local JOB_ID=${1:?usage: qa-get-job-incidents JOB_ID}
	qa-get-job "$JOB_ID" | jq -r '
		.job.settings
		| to_entries
		| map(select(.VAR | endswith("_ISSUES")))
		| .[] | "\(.VAR) \(.value)"' 2>/dev/null | while read -r VAR ISSUES_LIST; do
		echo "$VAR"
		IFS=',' read -ra ISSUES <<<"$ISSUES_LIST"
		for ISSUE in "${ISSUES[@]}"; do
			curl -s "http://dashboard.qam.suse.de/api/incidents/$ISSUE" | jq --arg ISSUE "$ISSUE" -r '.rr_number as $RR_NUMBER | .packages[] | "    \($ISSUE):\($RR_NUMBER) \(.)"' 2>/dev/null || echo "    $ISSUE: 404"
		done
	done
}

qa-stop-build() {
	local URL=${1:?usage: qa-stop-build URL}
	local JOBS
	mapfile -t JOBS < <(_qa-get-build-jobs "$URL")
	echo "found ${#JOBS[@]} jobs"

	SKIP_CONFIRMATION=1
	I=1
	for JOB_ID in "${JOBS[@]}"; do
		echo "stopping JOB_ID=$JOB_ID... :: $CUR/${#JOBS[@]}"
		qa-stop-job "$JOB_ID"
		((I++))
	done
	SKIP_CONFIRMATION=0
}

qa-delete-job() {
	local JOB_ID=${1:?usage: qa-delete-job JOB_ID}
	if [[ ! "$JOB_ID" =~ ^-?[0-9]+$ ]]; then
		echo "error: JOB_ID should be a number" >&2
		return 1
	fi
	qa api -X DELETE jobs/"$JOB_ID"
}

qa-update-needles() {
	local SSH="ssh $TARGET -- "

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--no-ssh)
			SSH=
			;;
		esac
		shift
	done

	$SSH git -C /var/lib/openqa/tests/os-autoinst-needles-opensuse pull
	$SSH git -C /var/lib/openqa/tests/os-autoinst-needles-sles pull
}

qa-link() {
	local SSH="ssh $TARGET -- "

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--no-ssh)
			SSH=
			;;
		esac
		shift
	done

	echo linking suse needles...
	for product in alp sle sle-micro; do
		$SSH ln -sfn /var/lib/openqa/tests/os-autoinst-needles-sles /var/lib/openqa/tests/os-autoinst-distri-opensuse/products/$product/needles
	done

	echo linking opensuse needles...
	for product in microos opensuse leap-micro; do
		$SSH ln -sfn /var/lib/openqa/tests/os-autoinst-needles-opensuse /var/lib/openqa/tests/os-autoinst-distri-opensuse/products/$product/needles
	done

	echo fixing /var/lib/openqa/tests permissions...
	$SSH sudo chown geekotest:root -R /var/lib/openqa/tests/
	$SSH sudo chown geekotest:nogroup -R /var/lib/openqa/tests/
	$SSH sudo chmod g+w /var/lib/openqa/tests/*
	$SSH git config --global --add safe.directory /var/lib/openqa/share/tests/os-autoinst-needles-opensuse
	$SSH git config --global --add safe.directory /var/lib/openqa/share/tests/os-autoinst-needles-sles
}

qa-schedule() {
	qa schedule "$@"
}

qa-sql() {
	local SSH="ssh $TARGET -- "

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--no-ssh)
			SSH=
			;;
		esac
		shift
	done

	$SSH su - postgres -c \'psql -d openqa\'
}

qa-vnc() {
	LOCAL_PORT=6000
	REMOTE_PORT=5991
	REMOTE_HOST=$TARGET
	WORKER=localhost

	usage() {
		echo "usage: qa-vnc [options]"
		echo ""
		echo "  -p  --port             Local port ($LOCAL_PORT)"
		echo "  -P  --remote-port      Remote port ($REMOTE_PORT)"
		echo "  -t  --target           Remote host ($REMOTE_HOST)"
		echo "  -w  --worker           Target worker ($WORKER)"
	}

	while [[ $# -gt 0 ]]; do
		case "$1" in
		-h | --help)
			usage
			return 0
			;;
		-p | --port)
			shift
			LOCAL_PORT="$1"
			;;
		-P | --remote-port)
			shift
			REMOTE_PORT="$1"
			;;
		-t | --target)
			shift
			REMOTE_HOST="$1"
			;;
		-w | --worker)
			shift
			WORKER="$1"
			;;
		*) break ;;
		esac
		shift
	done

	ssh \
		-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \
		-NL $LOCAL_PORT:$WORKER:$REMOTE_PORT $REMOTE_HOST &
	SSH_PID=$!

	sleep 5
	vncviewer -shared localhost:$LOCAL_PORT
	kill $SSH_PID
}
