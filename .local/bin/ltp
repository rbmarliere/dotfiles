#!/bin/bash

set -euo pipefail
# set -x

VERBOSE=0
CLEAR=0

_die() {
	echo "ERROR: $1" >&2
	exit 1
}

_preflight() {
	[[ $(git rev-parse --is-inside-work-tree) = "true" ]] || _die "refusing to run outside worktree"
	git remote -v | grep -q "linux-test-project/ltp" || _die "refusing to run outside LTP repository"
}

configure() {
	local KDIR=${1:?missing kernel directory}
	make autotools
	./configure --with-linux-dir="$KDIR"
}

build() {
	local KDIR=${1:?missing kernel directory}
	local TARGET=all

	local TEST_FILE_DIR=${2:-""}
	if [[ $TEST_FILE_DIR != "" ]]; then
		TARGET="-C $TEST_FILE_DIR $3"
	fi

	sudo chown "$(whoami)" -R .
	git submodule update --init --recursive

	if [[ ! -f ./configure && ! -f ./include/config.h ]]; then
		configure "$KDIR"
	fi

	bear --append -- make -j"$(nproc)" $TARGET
}

metadata() {
	if [[ ! -f ./configure && ! -f ./include/config.h ]]; then
		local KDIR=${1:?missing kernel directory}
		configure "$KDIR"
	fi

	pushd metadata
	sudo zypper search --installed-only asciidoc || _die "install asciidoc first and re-configure"

	make -j"$(nproc)"
	popd

	xdg-open docparse/metadata.html
}

install() {
	local ROOT=${1:?missing root filesystem}

	local TEST_FILE_DIR=${2:-""}
	if [[ $TEST_FILE_DIR != "" && -d $ROOT/opt/ltp/testcases/bin && -f $ROOT/opt/ltp/kirk ]]; then
		sudo cp "$TEST_FILE_DIR/$3" "$ROOT/opt/ltp/testcases/bin"
	else
		sudo make -j"$(nproc)" DESTDIR="$ROOT" install || _die "installation failed, try a full build first"
	fi
}

vng-run() {
	VERBOSE_OPT=
	[[ $VERBOSE -gt 0 ]] && VERBOSE_OPT=-v

	local KDIR=${1:?missing kernel directory}
	local ROOT=${2:?missing root filesystem}
	shift 2

	if [[ ! -f "$KDIR/vmlinux" ]]; then
		pushd "$KDIR"
		vng -k
		vng -b
		popd
	fi

	set -x
	sudo vng --run "$KDIR" --root "$ROOT" $VERBOSE_OPT --exec "$*"
	set +x
}

run() {
	local FILE=${1:?missing test file}
	shift

	[[ -f $FILE ]] || _die "file $FILE not found"

	local KDIR=
	local ROOT=
	local TEST_ARGS=()
	local TEST_FILE_PATH
	local TEST_FILE_NAME
	local TEST_FILE_DIR
	local TEST_NAME

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--)
			shift
			TEST_ARGS=("$@")
			break
			;;
		*)
			if [[ -z $KDIR ]]; then
				KDIR=$1
			elif [[ -z $ROOT ]]; then
				ROOT=$1
			else
				_die "unexpected argument: $1"
			fi
			;;
		esac
		shift
	done

	KDIR=${KDIR:-$LINUX/current}
	ROOT=${ROOT:-$ROOTS/x86_64/sid}
	TEST_FILE_PATH=$(realpath "$FILE")
	TEST_FILE_NAME=$(basename "$TEST_FILE_PATH")
	TEST_FILE_DIR=$(dirname "$TEST_FILE_PATH")
	TEST_NAME=${TEST_FILE_NAME%.*}

	build "$KDIR" "$TEST_FILE_DIR" "$TEST_NAME"
	install "$ROOT" "$TEST_FILE_DIR" "$TEST_NAME"
	vng-run "$KDIR" "$ROOT" "/opt/ltp/testcases/bin/$TEST_NAME" "${TEST_ARGS[@]}"
}

help() {
	set +u
	echo
	case $1 in
	configure)
		echo "usage: $0 configure <kernel source directory>"
		;;
	build)
		echo "usage: $0 build <kernel source directory> [<testcase dir> <test>]"
		;;
	metadata)
		echo "usage: $0 metadata [<kernel source directory>]"
		;;
	install)
		echo "usage: $0 install <destination root filesystem>"
		;;
	vng-run)
		echo "usage: $0 vng-run <kernel source directory> <destination root filesystem> <command>"
		;;
	run)
		echo "usage: $0 run <test_file.c> [<kernel source directory> [<destination root filesystem>]] [-- <additional arguments to the test>]"
		echo
		echo "This command builds test_file.c, installs and run it with sane defaults."
		;;
	*)
		echo "usage: $0 [global options] <command> [arguments]"
		echo
		echo "global options:"
		echo "    -v	--verbose		Increase verbosity"
		echo "    -c	--clear			Clear all builds"
		echo
		echo "commands:"
		echo "    configure"
		echo "    build"
		echo "    metadata"
		echo "    install"
		echo "    vng-run"
		echo "    run"
		echo
		echo "use $0 help <command> for more information about a command"
		;;
	esac
	echo
}

if [[ $# -eq 0 ]]; then
	help
fi

while [[ $# -gt 0 ]]; do
	case $1 in
	-v|--verbose)
		shift
		VERBOSE=1
		;;
	-c|--clear)
		shift
		CLEAR=1
		;;
	help)
		shift
		help "$@"
		break
		;;
	configure)
		shift
		_preflight
		configure "$@"
		break
		;;
	build)
		shift
		_preflight
		build "$@"
		break
		;;
	metadata)
		shift
		_preflight
		metadata "$@"
		break
		;;
	install)
		shift
		_preflight
		install "$@"
		break
		;;
	vng-run)
		shift
		_preflight
		vng-run "$@"
		break
		;;
	run)
		shift
		_preflight
		run "$@"
		break
		;;
	*)
		help
		break
		;;
	esac
done
