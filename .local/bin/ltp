#!/bin/bash

set -euo pipefail
# set -x

VERBOSE=0
CLEAN=0
ARCH=x86_64
NPROC=$(nproc)
BEAR=()
INTERCEPT_BUILD=()

# openSUSE cross-compile settings to pass through
# https://github.com/arighi/virtme-ng/blob/ee3f58a787dac6bca492c7c9e3ea235b508852e3/virtme_ng/run.py#L489
declare -A ARCHMAP
ARCHMAP["arm64"]="/usr/bin/aarch64-suse-linux-"
ARCHMAP["armhf"]="/usr/bin/arm-suse-linux-gnueabi-"
ARCHMAP["i386"]=
ARCHMAP["ppc64el"]="/usr/bin/powerpc64le-suse-linux-"
ARCHMAP["s390x"]="/usr/bin/s390x-suse-linux-"
ARCHMAP["riscv64"]="/usr/bin/riscv64-suse-linux-"

die() {
	echo "ERROR: $1" >&2
	exit 1
}

log_output() {
	echo "$@"
	{
		echo
		echo "$@"
		echo
	} | tee -a build.log >>error.log
	if [[ $VERBOSE -gt 0 ]]; then
		# keep output in the terminal
		"$@" 2>&1 | tee -a build.log | tee >(tee -a error.log >&2)
	else
		"$@" >>build.log 2> >(tee -a error.log >>build.log)
	fi
}

_setcc() {
	if [[ $ARCH = x86_64 || $ARCH = i386 ]]; then
		CC="/usr/bin/gcc"
	else
		CC="${ARCHMAP[$ARCH]}gcc"
	fi
	export CC
	GCC="14"
	if [[ $ARCH = i386 && ! -d /usr/lib64/gcc/x86_64-suse-linux/$GCC/32 ]]; then
		sudo zypper install gcc$GCC-32bit || die "compiler $CC not found"
		return
	fi
	if [[ ! -f $CC ]]; then
		declare -A PKGMAP
		PKGMAP["arm64"]="cross-aarch64-gcc$GCC"
		PKGMAP["armhf"]="cross-arm-gcc$GCC"
		PKGMAP["ppc64el"]="cross-ppc64le-gcc$GCC"
		PKGMAP["s390x"]="cross-s390x-gcc$GCC"
		PKGMAP["riscv64"]="cross-riscv64-gcc$GCC"
		PKGMAP["x86_64"]="gcc$GCC"
		sudo zypper install "${PKGMAP[$ARCH]}" || die "compiler $CC not found"
	fi
}

_pre_flight() {
	[[ $(git rev-parse --is-inside-work-tree) = "true" ]] || die "refusing to run outside a git worktree"
	git remote -v | grep -q "linux-test-project/ltp" || die "refusing to run outside LTP repository"
	[[ $(git rev-parse --show-toplevel) = $(pwd) ]] || die "refusing to run outside LTP repository top level dir."
	rm ./*.log 2>/dev/null || true
	[[ $CLEAN -gt 0 ]] && { rm compile_commands.json 2>/dev/null || true; }
	sudo chown "$(whoami)" -R .
	git submodule update --init --recursive
	[[ $CLEAN -gt 0 ]] && log_output make clean
}

prep() {
	# https://github.com/linux-test-project/ltp/blob/master/ci/tumbleweed.sh
	local LTP_DEPS=(autoconf automake clang clang-tools findutils gcc gcc-32bit git gzip iproute2 make kernel-default-devel keyutils-devel lsb-release pkgconf-pkg-config linux-glibc-devel libacl-devel libacl-devel-32bit libaio-devel libaio-devel-32bit libcap-devel libcap-ng0-32bit libmnl-devel libmnl0-32bit libnuma-devel libnuma1-32bit libopenssl-3-devel libopenssl-3-devel-32bit libselinux-devel libselinux1-32bit libtirpc-devel libtirpc3-32bit)
	local DEPS=(make Bear llvm bison flex virtme debootstrap dpkg asciidoc)
	sudo zypper install -y "${LTP_DEPS[@]}" "${DEPS[@]}"
}

configure() {
	local KDIR=${1:?missing kernel directory}
	local ARGV=(--with-linux-dir="$KDIR")
	local CFLAGS=
	local LDFLAGS=

	_setcc

	[[ $ARCH != x86_64 && $ARCH != i386 ]] && ARGV+=("--host=$(basename "${CC%-gcc}")")
	if [[ $ARCH = i386 ]]; then
		export CFLAGS="-m32"
		export LDFLAGS="-m32"
		# workaround for tumbleweed...
		[[ ! -f /usr/lib/libtirpc.so ]] && sudo ln -s /usr/lib/libtirpc.so.3 /usr/lib/libtirpc.so
		[[ ! -f /usr/lib/libmnl.so ]] && sudo ln -s /usr/lib/libmnl.so.0 /usr/lib/libmnl.so

	fi

	log_output make autotools
	log_output ./configure "${ARGV[@]}"
}

build() {
	local KDIR=${KDIR:-$LINUX/ltp}
	local TARGET=(all)
	local TEST_FILE_DIR=${2:-""}
	if [[ $TEST_FILE_DIR != "" ]]; then
		TARGET=(-C "$TEST_FILE_DIR" "$3")
	fi

	_setcc

	if [[ ! -f ./include/mk/config.mk ]] || ! grep -q "CC.*:= $CC" include/mk/config.mk; then
		# clean and re-configure also on ARCH mismatch
		log_output make clean
		configure "$KDIR"
	fi

	log_output "${BEAR[@]}" "${INTERCEPT_BUILD[@]}" make -j"$NPROC" "${TARGET[@]}"

	return 0
}

metadata() {
	if [[ ! -f ./configure && ! -f ./include/config.h ]]; then
		local KDIR=${1:?missing kernel directory}
		configure "$KDIR"
	fi

	pushd metadata

	sudo zypper search --installed-only asciidoc || die "install asciidoc first and re-configure"

	log_output make -j"$NPROC"

	popd

	xdg-open docparse/metadata.html
}

install() {
	local ROOT=${1:?missing root filesystem}
	local TEST_FILE_DIR=${2:-""}

	if [[ $CLEAN -gt 0 ]]; then
		echo sudo rm -rf "$ROOT/opt/ltp"
		sudo rm -rf "$ROOT/opt/ltp"
	fi

	if [[ $TEST_FILE_DIR != "" && -d $ROOT/opt/ltp/testcases/bin && -f $ROOT/opt/ltp/kirk ]]; then
		echo sudo cp "$TEST_FILE_DIR/$3" "$ROOT/opt/ltp/testcases/bin"
		sudo cp "$TEST_FILE_DIR/$3" "$ROOT/opt/ltp/testcases/bin" || return 1
	else
		log_output sudo make -j"$NPROC" DESTDIR="$ROOT" install || return 1
	fi

	return 0
}

run() {
	local VERBOSITY=
	local KDIR=
	local ROOT=
	local TEST_ARGS=()
	local TEST_FILE_PATH
	local TEST_FILE_NAME
	local TEST_FILE_DIR
	local TEST_NAME
	local FILE=${1:?missing test file}
	shift
	[[ -f $FILE ]] || die "file $FILE not found"

	while [[ $# -gt 0 ]]; do
		case "$1" in
		--)
			shift
			TEST_ARGS=("$@")
			break
			;;
		-r)
			KDIR=$1
			shift
			;;
		-R)
			ROOT=$1
			shift
			;;
		esac
		shift
	done

	KDIR=${KDIR:-$LINUX/ltp}
	ROOT=${ROOT:-$ROOTS/$ARCH/sid}
	TEST_FILE_PATH=$(realpath "$FILE")
	TEST_FILE_NAME=$(basename "$TEST_FILE_PATH")
	TEST_FILE_DIR=$(dirname "$TEST_FILE_PATH")
	TEST_NAME=${TEST_FILE_NAME%.*}

	if [[ $TEST_FILE_NAME =~ .sh$ && ! -f $ROOT/opt/ltp/testcases/bin/tst_test.sh ]]; then
		build "$KDIR"
		install "$ROOT"
	else
		build "$KDIR" "$TEST_FILE_DIR" "$TEST_NAME"
		if ! install "$ROOT" "$TEST_FILE_DIR" "$TEST_NAME"; then
			# trigger full build if unsuccessful partial install
			echo triggering full build
			build "$KDIR"
			install "$ROOT"
		fi
	fi

	echo vng -a "$ARCH" -r "$KDIR" -e "LTPROOT='/opt/ltp' PATH=\"/opt/ltp/testcases/bin:\$PATH\" /opt/ltp/testcases/bin/$TEST_NAME ${TEST_ARGS[*]}"
	[[ $VERBOSE -gt 0 ]] && VERBOSITY=-v
	vng $VERBOSITY -a "$ARCH" -r "$KDIR" -e "LTPROOT='/opt/ltp' PATH=\"/opt/ltp/testcases/bin:\$PATH\" /opt/ltp/testcases/bin/$TEST_NAME ${TEST_ARGS[*]}"
}

usage() {
	set +u
	echo
	case $1 in
	prep)
		echo "usage: $0 prep"
		;;
	configure)
		echo "usage: $0 configure <kernel source directory>"
		;;
	build)
		echo "usage: $0 build [-b|-i] <kernel source directory> [<testcase dir> <test>]"
		echo
		echo "options:"
		echo "    -b	--bear		Use bear to build a compile_commands.json database"
		echo "    -i	--intercept	Use intercept-build to build a compile_commands.json database"
		;;
	metadata)
		echo "usage: $0 metadata [<kernel source directory>]"
		;;
	install)
		echo "usage: $0 install <destination root filesystem>"
		;;
	run)
		echo "usage: $0 run <test_file.c> [-r <kernel source directory>] [-R <destination root filesystem>] [-- <additional arguments to the test>]"
		echo
		echo "This command builds test_file.c, installs and run it with sane defaults."
		;;
	*)
		echo "usage: $0 [options] <command>"
		echo
		echo "options:"
		echo "    -v		Increase verbosity"
		echo "    -a		Target architecture (available: arm64, armhf, i386 ppc64el, s390x, riscv64)"
		echo "    -c		Clean all builds"
		echo
		echo "commands:"
		echo "    configure"
		echo "    build"
		echo "    metadata"
		echo "    install"
		echo "    run"
		echo
		echo "use $0 help <command> for more information about a command"
		;;
	esac
	echo
}

if [[ $# -eq 0 ]]; then
	usage
	exit 1
fi

while getopts "vca:" OPT; do
	case "$OPT" in
	v) VERBOSE=1 ;;
	c) CLEAN=1 ;;
	a)
		ARCH="$OPTARG"
		[[ $ARCH != "$HOST" && -z ${ARCHMAP[$ARCH]+_} ]] && die "unsupported architecture"
		;;
	*)
		usage
		exit 1
		;;
	esac
done
shift $((OPTIND - 1))

SUBCMD=$1
shift
case "$SUBCMD" in
help)
	usage "$@"
	;;
prep)
	prep
	;;
configure)
	_pre_flight
	configure "$@"
	;;
build)
	OPTIND=1
	while getopts "bi" OPT; do
		case "$OPT" in
		b)
			if [[ -n "${INTERCEPT_BUILD[*]}" ]]; then
				echo "Error: -b and -i are mutually exclusive." >&2
				exit 1
			fi
			BEAR=(bear --append --)
			;;
		i)
			if [[ -n "${BEAR[*]}" ]]; then
				echo "Error: -b and -i are mutually exclusive." >&2
				exit 1
			fi
			INTERCEPT_BUILD=(intercept-build)
			;;
		*)
			usage build
			exit 1
			;;
		esac
	done
	shift $((OPTIND - 1))
	_pre_flight
	build "$@"
	;;
metadata)
	_pre_flight
	metadata "$@"
	;;
install)
	_pre_flight
	install "$@"
	;;
run)
	_pre_flight
	run "$@"
	;;
esac
