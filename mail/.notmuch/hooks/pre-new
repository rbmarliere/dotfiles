#!/bin/bash

# lore.k.o things adapted from https://github.com/wkz/notmuch-lore
# pre-sync and maildir_mv from https://jasoncarloscox.com/creations/sync-mail

set -e

die() {
	echo "ERROR: $1" >&2
	exit 1
}

export GIT_HTTP_LOW_SPEED_LIMIT=1000
export GIT_HTTP_LOW_SPEED_TIME=10
DB=$(notmuch config get database.path)
META=$DB/.notmuch

getvar() {
	# From the INI file $1, get the value of key $3 in section $2.
	awk -vsect=$2 -vvar=$3 -F= '
    	/^\[.*\]$/ {
		accept = $1 == "[" sect "]";
	}
	/=/ {
		if (accept && $1 == var) {
			print($2);
			exit(0);
		}
        }' $1
}

import() {
	local GIT="git --git-dir=$2"

	# Make sure the Maildir exists
	mkdir -p $DB/kernel.org/$1/{tmp,new,cur}

	# Extract the message from each commit in the range and store it
	# in the Maildir for notmuch to consume.
	$GIT rev-list $3 | while read SHA; do
		if [[ "$4" = "init" ]]; then
			# initial import should not mark anything as new, therefore add to "cur"
			# so neomutt does not need to re-write everything (N->O)
			# after closing the mailbox for the first time
			$GIT show $SHA:m >$DB/kernel.org/$1/cur/$SHA:2
		elif [[ "$4" = "new" ]]; then
			$GIT show $SHA:m >$DB/kernel.org/$1/new/$SHA
		fi
	done
}

sync() {
	local GITDIR=$BASE/git/$1

	# Fetch new messages from all epochs and inject them to the
	# corresponding Maildir.
	for EPOCH in $(ls -v $GITDIR/); do
		local GIT="git --git-dir=$GITDIR/$EPOCH"
		local HEAD=$($GIT rev-list -n1 master)

		echo "  epoch$EPOCH: syncing" >&2
		if ! $GIT fetch --quiet; then
			echo "  epoch$EPOCH: fetch failed, aborting $1..." >&2
			return
		fi
		#import $1 $GITDIR/$EPOCH $HEAD..master init
		import $1 $GITDIR/$EPOCH $HEAD..master new

		# Basically we now want to `git fetch --depth=1`, but that
		# would race against new messages that came in during the
		# import. So instead we "manually" move the shallow boundary
		# to HEAD, and then get rid of all objects beyond it.
		echo $HEAD >$GITDIR/$EPOCH/shallow
		$GIT gc --prune=all --quiet
	done
}

initialize() {
	local GITDIR=$BASE/git/$1
	local EPOCH=$(ls -v $GITDIR/ 2>/dev/null | tail -n1)
	local URL=$(getvar $BASE/sources $1 url)
	local SINCE=$(getvar $BASE/sources $1 since)

	EPOCH=${EPOCH:--1}
	SINCE=${SINCE:-3 months ago}

	echo "$1: initialize ($URL)" >&2

	# Try to fetch newer epochs until there are no more.
	while git clone --mirror $URL/$(($EPOCH + 1)) $GITDIR/$(($EPOCH + 1)) 2>/dev/null; do
		EPOCH=$(($EPOCH + 1))
		echo "  epoch$EPOCH: initial import" >&2
		import $1 $GITDIR/$EPOCH master init
	done

	if [[ $EPOCH -lt 0 ]]; then
		echo "  WARN: no epochs found." >&2
		return 1
	fi
}

echo "-------------------------"
echo "PRE-NEW"

# if [[ -d $DB/kernel.org ]]; then
# 	echo "-------------------------"
# 	echo "Syncing $DB/kernel.org"
# 	BASE=$META/.lore
# 	[[ -d $DB && -d $META ]] || die "Please run 'notmuch setup' first."
# 	mkdir -p $BASE
# 	SOURCES=$(grep -e '^\[.*\]$' <$BASE/sources | tr -d '[]')
# 	for SOURCE in $SOURCES; do
# 		if ! initialize $SOURCE; then
# 			continue
# 		fi
# 		sync $SOURCE
# 	done
# fi

maildir_mv() {
	src_path="$1"
	dst_maildir="$2"
	[ -f "$src_path" ] || return 0

	# rename the file to remove the U=<uid> and prevent mbsync errors
	subdir="$(basename "$(dirname "$src_path")")"
	file="$(basename "$src_path")"
	id="${file%%,*}"
	id="${id%%:*}"
	flags="${file##*,}"

	if [ "$subdir" = cur ] || [ -n "$flags" ]; then
		new_file="$id:2,$flags"
	else
		new_file="$id"
	fi

	mv "$src_path" ~/mail/"$dst_maildir/$subdir/$new_file"
}

maildir_mvs() {
	while read -r file; do
		maildir_mv "$file" "$1"
	done
}

if [[ -d $DB/marliere.net ]] && type mbsync &>/dev/null; then
	echo "-------------------------"
	echo "PRE-SYNC $DB/marliere.net"
	# marliere.net pre-sync will keep labels in sync with maildir folders
	# imap folders: archive  drafts  important  inbox  sent  spam  trash
	# if tagged inbox, important, spam, or trash but not in corresponding folder, move it
	# inbox
	notmuch search --output=files not tag:new \
		and path:"marliere.net/all/**" \
		and tag:inbox and not "folder:marliere.net/all/inbox" |
		grep marliere.net |
		maildir_mvs "marliere.net/all/inbox"
	# important (only move if not in inbox)
	notmuch search --output=files not tag:new \
		and path:"marliere.net/all/**" \
		and tag:important and not tag:inbox and not "folder:marliere.net/all/important" |
		grep marliere.net |
		maildir_mvs "marliere.net/all/important"
	# spam
	notmuch search --output=files not tag:new \
		and path:"marliere.net/all/**" \
		and tag:spam and not tag:inbox and not tag:trash and not tag:important and not folder:"marliere.net/all/spam" |
		grep marliere.net |
		maildir_mvs "marliere.net/all/spam"
	# trash
	notmuch search --output=files not tag:new \
		and path:"marliere.net/all/**" \
		and tag:trash and not tag:inbox and not folder:"marliere.net/all/trash" |
		grep marliere.net |
		maildir_mvs "marliere.net/all/trash"
	# if in inbox, important, spam, or trash but missing corresponding tag, move to archive
	notmuch search --output=files not tag:new \
		and path:"marliere.net/all/**" \
		and "(folder:marliere.net/all/inbox and not tag:inbox)" \
		or "(folder:marliere.net/all/important and not tag:important)" \
		or "(folder:marliere.net/all/spam and not tag:spam)" \
		or "(folder:marliere.net/all/trash and not tag:trash)" |
		grep marliere.net |
		grep -v archive |
		maildir_mvs "marliere.net/all/archive"

	echo "SYNC $DB/marliere.net"
	mbsync -V trash
	echo "-------------------------"
	mbsync -V all
	echo "-------------------------"
	mbsync -V spam
	echo $DB/marliere.net/trash/**/{cur,new}/* | xargs rm -f
fi

if [[ -f ~/src/extra/lieer/master/venv/bin/activate ]]; then
	source ~/src/extra/lieer/master/venv/bin/activate || die 'could not activate lieer venv'
fi

if [[ -d $DB/gmail.com ]] && type gmi &> /dev/null; then
	echo "-------------------------"
	echo "SYNC $DB/gmail.com"
	gmi sync -C $DB/gmail.com -s
fi

if [[ -d $DB/suse.com ]] && type gmi &> /dev/null; then
	echo "-------------------------"
	echo "SYNC $DB/suse.com"
	gmi sync -C $DB/suse.com -s
fi
